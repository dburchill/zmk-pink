/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "keypos_42keys.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NUMB 1
#define SYMB 2
#define BT   3

&mt {
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_cpy {
            bindings = <&kp LG(C)>;
            key-positions = <26 27>;
        };

        combo_cut {
            bindings = <&kp LG(X)>;
            key-positions = <25 26>;
        };

        combo_pst {
            bindings = <&kp LG(V)>;
            key-positions = <27 28>;
        };

        combo_pst_wo {
            bindings = <&kp LS(LG(V))>;
            key-positions = <29 27>;
        };

        combo_pst_key {
            bindings = <&kp LS(LA(LG(V)))>;
            key-positions = <28 29>;
        };

        app_chgr {
            bindings = <&kp LG(SPACE)>;
            key-positions = <16 15>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // | ESC  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&gresc                    &kp Q             &kp W        &kp E           &kp R           &kp T        &kp Y  &kp U            &kp I                      &kp O        &kp P                      &kp BSPC
&kp TAB                   &mt LEFT_SHIFT A  &mt LCTRL S  &mt LEFT_ALT D  &mt LEFT_GUI F  &kp G        &kp H  &mt RIGHT_GUI J  &mt RIGHT_ALT K            &mt RCTRL L  &mt RIGHT_SHIFT SEMICOLON  &kp SQT
&kp LS(LA(LEFT_CONTROL))  &kp Z             &kp X        &kp C           &kp V           &kp B        &kp N  &kp M            &kp COMMA                  &kp DOT      &kp FSLH                   &kp RET
                                                         &mo 3           &mo 1           &kp SPACE    &none  &mo 2            &kp RS(RA(RC(RIGHT_GUI)))
            >;
        };

        numb_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp N1    &kp N2  &kp N3    &kp N4    &kp N5       &kp N6     &kp N7    &kp N8    &kp N9   &kp N0   &kp BSPC
&trans  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS  &kp STAR  &kp F11  &kp F12  &kp F13
&trans  &kp F1    &kp F2  &kp F3    &kp F4    &kp F5       &kp F6     &kp F7    &trans    &trans   &kp F10  &trans
                          &kp LGUI  &trans    &kp SPACE    &kp RET    &trans    &kp RALT
            >;
        };

        symb_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans    &kp AMPS  &kp STAR  &kp MINUS  &kp GT    &trans       &kp CARET  &kp AMPS  &kp ASTRK  &kp LPAR   &kp RPAR  &kp BSPC
&kp LBRC  &kp LPAR  &kp LBKT  &kp RBKT   &kp RPAR  &kp RBRC     &kp LEFT   &kp DOWN  &kp UP     &kp RIGHT  &trans    &trans
&trans    &kp PIPE  &kp BSLH  &kp EQUAL  &kp PLUS  &kp FSLH     &trans     &trans    &trans     &trans     &trans    &trans
                              &kp LGUI   &trans    &kp SPACE    &kp RET    &trans    &kp RALT
            >;
        };

        layer_bt {
            bindings = <
&trans      &trans        &trans        &trans        &trans        &trans          &kp C_VOL_UP  &mt K_MUTE C_VOL_DN  &trans  &trans  &trans  &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans        &trans               &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans          &trans        &trans               &trans  &trans  &trans  &trans
                                        &trans        &trans        &trans          &trans        &trans               &trans
            >;
        };
    };
};
